{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{gsap}from'gsap';import'./SpinningWheel.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SpinningWheel=()=>{const[segmentCount,setSegmentCount]=useState(6);const[winningSegment,setWinningSegment]=useState('random');const[spinDuration,setSpinDuration]=useState(5.5);const[isSpinning,setIsSpinning]=useState(false);const[status,setStatus]=useState('Ready to spin!');const[currentRotation,setCurrentRotation]=useState(0);const wheelRef=useRef(null);const spinAudioRef=useRef(null);const colors=['#ff6b6b','#4ecdc4','#45b7d1','#96ceb4','#feca57','#ff9ff3','#a8e6cf','#ff8b94','#ffaaa5','#ff677d','#d4a4eb','#a8dadc'];const emojis=['🎯','🍀','⭐','🎉','🔥','💎','🚀','🎊','🌟','🎈','🎁','🏆'];const updateSegmentCount=newCount=>{const count=parseInt(newCount);if(count>=2&&count<=12){setSegmentCount(count);setStatus(\"Updated to \".concat(count,\" segments\"));// Reset winning segment if it's higher than new count\nif(winningSegment!=='random'&&parseInt(winningSegment)>count){setWinningSegment('random');}setTimeout(()=>{if(!isSpinning)setStatus('Ready to spin!');},2000);}};const drawWheel=()=>{if(!wheelRef.current)return;wheelRef.current.innerHTML='';const svgNS=\"http://www.w3.org/2000/svg\";const svg=document.createElementNS(svgNS,'svg');svg.setAttribute('viewBox','0 0 350 350');svg.setAttribute('width','100%');svg.setAttribute('height','100%');const cx=175;const cy=175;const r=165;const angle=360/segmentCount;for(let i=0;i<segmentCount;i++){const startAngle=i*angle;const endAngle=(i+1)*angle;const x1=cx+r*Math.cos((startAngle-90)*Math.PI/180);const y1=cy+r*Math.sin((startAngle-90)*Math.PI/180);const x2=cx+r*Math.cos((endAngle-90)*Math.PI/180);const y2=cy+r*Math.sin((endAngle-90)*Math.PI/180);const largeArc=angle>180?1:0;const pathData=\"M \".concat(cx,\" \").concat(cy,\" L \").concat(x1,\" \").concat(y1,\" A \").concat(r,\" \").concat(r,\" 0 \").concat(largeArc,\" 1 \").concat(x2,\" \").concat(y2,\" Z\");const path=document.createElementNS(svgNS,'path');path.setAttribute('d',pathData);path.setAttribute('fill',colors[i%colors.length]);path.setAttribute('stroke','#fff');svg.appendChild(path);const midAngle=(startAngle+endAngle)/2;// Position for number (top of segment)\nconst numberTx=cx+80*Math.cos((midAngle-90)*Math.PI/180);const numberTy=cy+80*Math.sin((midAngle-90)*Math.PI/180);// Position for emoji (bottom of segment)\nconst emojiTx=cx+130*Math.cos((midAngle-90)*Math.PI/180);const emojiTy=cy+130*Math.sin((midAngle-90)*Math.PI/180);// Add number text (at top)\nconst numberText=document.createElementNS(svgNS,'text');numberText.setAttribute('x',numberTx.toString());numberText.setAttribute('y',numberTy.toString());numberText.setAttribute('text-anchor','middle');numberText.setAttribute('dominant-baseline','middle');numberText.setAttribute('fill','white');numberText.setAttribute('font-size','18');numberText.setAttribute('font-weight','bold');numberText.setAttribute('transform',\"rotate(\".concat(midAngle,\", \").concat(numberTx,\", \").concat(numberTy,\")\"));numberText.textContent=(i+1).toString();svg.appendChild(numberText);// Add emoji text (larger, at bottom)\nconst emojiText=document.createElementNS(svgNS,'text');emojiText.setAttribute('x',emojiTx.toString());emojiText.setAttribute('y',emojiTy.toString());emojiText.setAttribute('text-anchor','middle');emojiText.setAttribute('dominant-baseline','middle');emojiText.setAttribute('font-size','32');emojiText.setAttribute('transform',\"rotate(\".concat(midAngle,\", \").concat(emojiTx,\", \").concat(emojiTy,\")\"));emojiText.textContent=emojis[i%emojis.length];svg.appendChild(emojiText);}wheelRef.current.appendChild(svg);};const calculateTargetAngle=segment=>{const anglePerSegment=360/segmentCount;const index=parseInt(segment)-1;const centerAngle=index*anglePerSegment+anglePerSegment/2;return(-centerAngle%360+360)%360;};const detectSegment=finalRotation=>{const normalized=(finalRotation%360+360)%360;const adjusted=(normalized+90)%360;const segment=Math.floor(adjusted/(360/segmentCount));return segment+1;};const playSpinSound=()=>{if(spinAudioRef.current){try{spinAudioRef.current.currentTime=0;spinAudioRef.current.play().catch(error=>{console.log('Audio playback failed:',error);});}catch(error){console.log('Audio error:',error);}}};const spin=()=>{if(isSpinning)return;setIsSpinning(true);const selected=winningSegment;const duration=parseFloat(spinDuration.toString());const spins=5;let targetSegment;let targetAngle;if(selected==='random'){targetSegment=Math.floor(Math.random()*segmentCount)+1;}else{targetSegment=parseInt(selected);}targetAngle=calculateTargetAngle(targetSegment.toString());// Add random variation between 5-10 degrees for slight variation\nconst randomVariation=5+Math.random()*5;// 5-10 degrees\nconst variationDirection=Math.random()<0.5?-1:1;// randomly clockwise or counterclockwise\nconst addedRotation=randomVariation*variationDirection;const finalTargetAngle=targetAngle+addedRotation;console.log(\"Added rotation: \".concat(addedRotation.toFixed(2),\"\\xB0\"));const baseRotation=Math.round(currentRotation/360)*360;const finalRotation=baseRotation+spins*360+finalTargetAngle;setStatus('Spinning...');playSpinSound();gsap.to(wheelRef.current,{rotation:finalRotation,duration:duration,ease:\"power2.out\",onComplete:()=>{setIsSpinning(false);setCurrentRotation(finalRotation);setStatus(\"\\uD83C\\uDFAF Landed on Segment \".concat(targetSegment,\"!\"));}});};useEffect(()=>{drawWheel();},[segmentCount]);const generateWinningOptions=()=>{const options=[/*#__PURE__*/_jsx(\"option\",{value:\"random\",children:\"Random\"},\"random\")];for(let i=1;i<=segmentCount;i++){options.push(/*#__PURE__*/_jsx(\"option\",{value:i,children:i},i));}return options;};return/*#__PURE__*/_jsxs(\"div\",{className:\"spinning-wheel-container\",children:[/*#__PURE__*/_jsxs(\"audio\",{ref:spinAudioRef,preload:\"auto\",children:[/*#__PURE__*/_jsx(\"source\",{src:\"/spin.mp3\",type:\"audio/mpeg\"}),\"Your browser does not support the audio element.\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uD83C\\uDFAF Guaranteed Spinning Wheel\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"control-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"segmentCount\",children:\"Segments:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"segmentCount\",min:\"2\",max:\"12\",value:segmentCount,onChange:e=>updateSegmentCount(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"control-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"winningSegment\",children:\"Winning Segment:\"}),/*#__PURE__*/_jsx(\"select\",{id:\"winningSegment\",value:winningSegment,onChange:e=>setWinningSegment(e.target.value),children:generateWinningOptions()})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"control-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"spinDuration\",children:\"Spin Duration (s):\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"spinDuration\",min:\"1\",max:\"10\",value:spinDuration,step:\"0.5\",onChange:e=>setSpinDuration(parseFloat(e.target.value))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"wheel-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"wheel\",ref:wheelRef}),/*#__PURE__*/_jsx(\"div\",{className:\"pointer\"}),/*#__PURE__*/_jsx(\"div\",{className:\"center-dot\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:spin,disabled:isSpinning,children:isSpinning?'🌟 SPINNING...':'🎲 SPIN THE WHEEL'}),/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:status})]})]});};export default SpinningWheel;","map":{"version":3,"names":["React","useState","useEffect","useRef","gsap","jsx","_jsx","jsxs","_jsxs","SpinningWheel","segmentCount","setSegmentCount","winningSegment","setWinningSegment","spinDuration","setSpinDuration","isSpinning","setIsSpinning","status","setStatus","currentRotation","setCurrentRotation","wheelRef","spinAudioRef","colors","emojis","updateSegmentCount","newCount","count","parseInt","concat","setTimeout","drawWheel","current","innerHTML","svgNS","svg","document","createElementNS","setAttribute","cx","cy","r","angle","i","startAngle","endAngle","x1","Math","cos","PI","y1","sin","x2","y2","largeArc","pathData","path","length","appendChild","midAngle","numberTx","numberTy","emojiTx","emojiTy","numberText","toString","textContent","emojiText","calculateTargetAngle","segment","anglePerSegment","index","centerAngle","detectSegment","finalRotation","normalized","adjusted","floor","playSpinSound","currentTime","play","catch","error","console","log","spin","selected","duration","parseFloat","spins","targetSegment","targetAngle","random","randomVariation","variationDirection","addedRotation","finalTargetAngle","toFixed","baseRotation","round","to","rotation","ease","onComplete","generateWinningOptions","options","value","children","push","className","ref","preload","src","type","htmlFor","id","min","max","onChange","e","target","step","onClick","disabled"],"sources":["/Users/rich/Dropbox/2025/Footballco/01_PIXEL_QUIZ/05_Build/gsap_spin/src/SpinningWheel.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\nimport './SpinningWheel.css';\n\ninterface SpinningWheelProps {}\n\nconst SpinningWheel: React.FC<SpinningWheelProps> = () => {\n  const [segmentCount, setSegmentCount] = useState<number>(6);\n  const [winningSegment, setWinningSegment] = useState<string>('random');\n  const [spinDuration, setSpinDuration] = useState<number>(5.5);\n  const [isSpinning, setIsSpinning] = useState<boolean>(false);\n  const [status, setStatus] = useState<string>('Ready to spin!');\n  const [currentRotation, setCurrentRotation] = useState<number>(0);\n\n  const wheelRef = useRef<HTMLDivElement>(null);\n  const spinAudioRef = useRef<HTMLAudioElement>(null);\n\n  const colors: string[] = [\n    '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4',\n    '#feca57', '#ff9ff3', '#a8e6cf', '#ff8b94',\n    '#ffaaa5', '#ff677d', '#d4a4eb', '#a8dadc'\n  ];\n\n  const emojis: string[] = [\n    '🎯', '🍀', '⭐', '🎉', '🔥', '💎', \n    '🚀', '🎊', '🌟', '🎈', '🎁', '🏆'\n  ];\n\n  const updateSegmentCount = (newCount: string): void => {\n    const count = parseInt(newCount);\n    if (count >= 2 && count <= 12) {\n      setSegmentCount(count);\n      setStatus(`Updated to ${count} segments`);\n      \n      // Reset winning segment if it's higher than new count\n      if (winningSegment !== 'random' && parseInt(winningSegment) > count) {\n        setWinningSegment('random');\n      }\n      \n      setTimeout(() => {\n        if (!isSpinning) setStatus('Ready to spin!');\n      }, 2000);\n    }\n  };\n\n  const drawWheel = (): void => {\n    if (!wheelRef.current) return;\n\n    wheelRef.current.innerHTML = '';\n    const svgNS = \"http://www.w3.org/2000/svg\";\n    const svg = document.createElementNS(svgNS, 'svg');\n    svg.setAttribute('viewBox', '0 0 350 350');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('height', '100%');\n\n    const cx = 175;\n    const cy = 175;\n    const r = 165;\n    const angle = 360 / segmentCount;\n\n    for (let i = 0; i < segmentCount; i++) {\n      const startAngle = i * angle;\n      const endAngle = (i + 1) * angle;\n\n      const x1 = cx + r * Math.cos((startAngle - 90) * Math.PI / 180);\n      const y1 = cy + r * Math.sin((startAngle - 90) * Math.PI / 180);\n      const x2 = cx + r * Math.cos((endAngle - 90) * Math.PI / 180);\n      const y2 = cy + r * Math.sin((endAngle - 90) * Math.PI / 180);\n\n      const largeArc = angle > 180 ? 1 : 0;\n      const pathData = `M ${cx} ${cy} L ${x1} ${y1} A ${r} ${r} 0 ${largeArc} 1 ${x2} ${y2} Z`;\n\n      const path = document.createElementNS(svgNS, 'path');\n      path.setAttribute('d', pathData);\n      path.setAttribute('fill', colors[i % colors.length]);\n      path.setAttribute('stroke', '#fff');\n      svg.appendChild(path);\n\n      const midAngle = (startAngle + endAngle) / 2;\n      \n      // Position for number (top of segment)\n      const numberTx = cx + 80 * Math.cos((midAngle - 90) * Math.PI / 180);\n      const numberTy = cy + 80 * Math.sin((midAngle - 90) * Math.PI / 180);\n      \n      // Position for emoji (bottom of segment)\n      const emojiTx = cx + 130 * Math.cos((midAngle - 90) * Math.PI / 180);\n      const emojiTy = cy + 130 * Math.sin((midAngle - 90) * Math.PI / 180);\n\n      // Add number text (at top)\n      const numberText = document.createElementNS(svgNS, 'text');\n      numberText.setAttribute('x', numberTx.toString());\n      numberText.setAttribute('y', numberTy.toString());\n      numberText.setAttribute('text-anchor', 'middle');\n      numberText.setAttribute('dominant-baseline', 'middle');\n      numberText.setAttribute('fill', 'white');\n      numberText.setAttribute('font-size', '18');\n      numberText.setAttribute('font-weight', 'bold');\n      numberText.setAttribute('transform', `rotate(${midAngle}, ${numberTx}, ${numberTy})`);\n      numberText.textContent = (i + 1).toString();\n      svg.appendChild(numberText);\n\n      // Add emoji text (larger, at bottom)\n      const emojiText = document.createElementNS(svgNS, 'text');\n      emojiText.setAttribute('x', emojiTx.toString());\n      emojiText.setAttribute('y', emojiTy.toString());\n      emojiText.setAttribute('text-anchor', 'middle');\n      emojiText.setAttribute('dominant-baseline', 'middle');\n      emojiText.setAttribute('font-size', '32');\n      emojiText.setAttribute('transform', `rotate(${midAngle}, ${emojiTx}, ${emojiTy})`);\n      emojiText.textContent = emojis[i % emojis.length];\n      svg.appendChild(emojiText);\n    }\n\n    wheelRef.current.appendChild(svg);\n  };\n\n  const calculateTargetAngle = (segment: string): number => {\n    const anglePerSegment = 360 / segmentCount;\n    const index = parseInt(segment) - 1;\n    const centerAngle = index * anglePerSegment + anglePerSegment / 2;\n    return ((-centerAngle % 360) + 360) % 360;\n  };\n\n  const detectSegment = (finalRotation: number): number => {\n    const normalized = ((finalRotation % 360) + 360) % 360;\n    const adjusted = (normalized + 90) % 360;\n    const segment = Math.floor(adjusted / (360 / segmentCount));\n    return segment + 1;\n  };\n\n  const playSpinSound = (): void => {\n    if (spinAudioRef.current) {\n      try {\n        spinAudioRef.current.currentTime = 0;\n        spinAudioRef.current.play().catch(error => {\n          console.log('Audio playback failed:', error);\n        });\n      } catch (error) {\n        console.log('Audio error:', error);\n      }\n    }\n  };\n\n  const spin = (): void => {\n    if (isSpinning) return;\n    setIsSpinning(true);\n\n    const selected = winningSegment;\n    const duration = parseFloat(spinDuration.toString());\n    const spins = 5;\n    let targetSegment: number;\n    let targetAngle: number;\n\n    if (selected === 'random') {\n      targetSegment = Math.floor(Math.random() * segmentCount) + 1;\n    } else {\n      targetSegment = parseInt(selected);\n    }\n\n    targetAngle = calculateTargetAngle(targetSegment.toString());\n    \n    // Add random variation between 5-10 degrees for slight variation\n    const randomVariation = 5 + Math.random() * 5; // 5-10 degrees\n    const variationDirection = Math.random() < 0.5 ? -1 : 1; // randomly clockwise or counterclockwise\n    const addedRotation = randomVariation * variationDirection;\n    const finalTargetAngle = targetAngle + addedRotation;\n    \n    console.log(`Added rotation: ${addedRotation.toFixed(2)}°`);\n    \n    const baseRotation = Math.round(currentRotation / 360) * 360;\n    const finalRotation = baseRotation + spins * 360 + finalTargetAngle;\n\n    setStatus('Spinning...');\n    playSpinSound();\n\n    gsap.to(wheelRef.current, {\n      rotation: finalRotation,\n      duration: duration,\n      ease: \"power2.out\",\n      onComplete: () => {\n        setIsSpinning(false);\n        setCurrentRotation(finalRotation);\n        setStatus(`🎯 Landed on Segment ${targetSegment}!`);\n      }\n    });\n  };\n\n  useEffect(() => {\n    drawWheel();\n  }, [segmentCount]);\n\n  const generateWinningOptions = (): JSX.Element[] => {\n    const options: JSX.Element[] = [<option key=\"random\" value=\"random\">Random</option>];\n    for (let i = 1; i <= segmentCount; i++) {\n      options.push(\n        <option key={i} value={i}>{i}</option>\n      );\n    }\n    return options;\n  };\n\n  return (\n    <div className=\"spinning-wheel-container\">\n      <audio ref={spinAudioRef} preload=\"auto\">\n        <source src=\"/spin.mp3\" type=\"audio/mpeg\" />\n        Your browser does not support the audio element.\n      </audio>\n\n      <div className=\"container\">\n        <h1>🎯 Guaranteed Spinning Wheel</h1>\n        \n        <div className=\"controls\">\n          <div className=\"control-group\">\n            <label htmlFor=\"segmentCount\">Segments:</label>\n            <input \n              type=\"number\" \n              id=\"segmentCount\" \n              min=\"2\" \n              max=\"12\" \n              value={segmentCount}\n              onChange={(e) => updateSegmentCount(e.target.value)}\n            />\n          </div>\n          \n          <div className=\"control-group\">\n            <label htmlFor=\"winningSegment\">Winning Segment:</label>\n            <select \n              id=\"winningSegment\"\n              value={winningSegment}\n              onChange={(e) => setWinningSegment(e.target.value)}\n            >\n              {generateWinningOptions()}\n            </select>\n          </div>\n          \n          <div className=\"control-group\">\n            <label htmlFor=\"spinDuration\">Spin Duration (s):</label>\n            <input \n              type=\"number\" \n              id=\"spinDuration\" \n              min=\"1\" \n              max=\"10\" \n              value={spinDuration}\n              step=\"0.5\"\n              onChange={(e) => setSpinDuration(parseFloat(e.target.value))}\n            />\n          </div>\n        </div>\n\n        <div className=\"wheel-container\">\n          <div className=\"wheel\" ref={wheelRef}></div>\n          <div className=\"pointer\"></div>\n          <div className=\"center-dot\"></div>\n        </div>\n\n        <button \n          onClick={spin}\n          disabled={isSpinning}\n        >\n          {isSpinning ? '🌟 SPINNING...' : '🎲 SPIN THE WHEEL'}\n        </button>\n        \n        <div className=\"status\">{status}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default SpinningWheel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}