{"ast":null,"code":"var _jsxFileName = \"/Users/rich/Dropbox/2025/Footballco/01_PIXEL_QUIZ/05_Build/gsap_spin/src/SpinningWheel.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\nimport './SpinningWheel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpinningWheel = () => {\n  _s();\n  const [segmentCount, setSegmentCount] = useState(6);\n  const [winningSegment, setWinningSegment] = useState('random');\n  const [spinDuration, setSpinDuration] = useState(5.5);\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [status, setStatus] = useState('Ready to spin!');\n  const [currentRotation, setCurrentRotation] = useState(0);\n  const wheelRef = useRef(null);\n  const spinAudioRef = useRef(null);\n  const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3', '#a8e6cf', '#ff8b94', '#ffaaa5', '#ff677d', '#d4a4eb', '#a8dadc'];\n  const emojis = ['🎯', '🍀', '⭐', '🎉', '🔥', '💎', '🚀', '🎊', '🌟', '🎈', '🎁', '🏆'];\n  const updateSegmentCount = newCount => {\n    const count = parseInt(newCount);\n    if (count >= 2 && count <= 12) {\n      setSegmentCount(count);\n      setStatus(`Updated to ${count} segments`);\n\n      // Reset winning segment if it's higher than new count\n      if (winningSegment !== 'random' && parseInt(winningSegment) > count) {\n        setWinningSegment('random');\n      }\n      setTimeout(() => {\n        if (!isSpinning) setStatus('Ready to spin!');\n      }, 2000);\n    }\n  };\n  const drawWheel = () => {\n    if (!wheelRef.current) return;\n    wheelRef.current.innerHTML = '';\n    const svgNS = \"http://www.w3.org/2000/svg\";\n    const svg = document.createElementNS(svgNS, 'svg');\n    svg.setAttribute('viewBox', '0 0 350 350');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('height', '100%');\n    const cx = 175;\n    const cy = 175;\n    const r = 165;\n    const angle = 360 / segmentCount;\n    for (let i = 0; i < segmentCount; i++) {\n      const startAngle = i * angle;\n      const endAngle = (i + 1) * angle;\n      const x1 = cx + r * Math.cos((startAngle - 90) * Math.PI / 180);\n      const y1 = cy + r * Math.sin((startAngle - 90) * Math.PI / 180);\n      const x2 = cx + r * Math.cos((endAngle - 90) * Math.PI / 180);\n      const y2 = cy + r * Math.sin((endAngle - 90) * Math.PI / 180);\n      const largeArc = angle > 180 ? 1 : 0;\n      const pathData = `M ${cx} ${cy} L ${x1} ${y1} A ${r} ${r} 0 ${largeArc} 1 ${x2} ${y2} Z`;\n      const path = document.createElementNS(svgNS, 'path');\n      path.setAttribute('d', pathData);\n      path.setAttribute('fill', colors[i % colors.length]);\n      path.setAttribute('stroke', '#fff');\n      svg.appendChild(path);\n      const midAngle = (startAngle + endAngle) / 2;\n\n      // Position for number (top of segment)\n      const numberTx = cx + 80 * Math.cos((midAngle - 90) * Math.PI / 180);\n      const numberTy = cy + 80 * Math.sin((midAngle - 90) * Math.PI / 180);\n\n      // Position for emoji (bottom of segment)\n      const emojiTx = cx + 130 * Math.cos((midAngle - 90) * Math.PI / 180);\n      const emojiTy = cy + 130 * Math.sin((midAngle - 90) * Math.PI / 180);\n\n      // Add number text (at top)\n      const numberText = document.createElementNS(svgNS, 'text');\n      numberText.setAttribute('x', numberTx.toString());\n      numberText.setAttribute('y', numberTy.toString());\n      numberText.setAttribute('text-anchor', 'middle');\n      numberText.setAttribute('dominant-baseline', 'middle');\n      numberText.setAttribute('fill', 'white');\n      numberText.setAttribute('font-size', '18');\n      numberText.setAttribute('font-weight', 'bold');\n      numberText.setAttribute('transform', `rotate(${midAngle}, ${numberTx}, ${numberTy})`);\n      numberText.textContent = (i + 1).toString();\n      svg.appendChild(numberText);\n\n      // Add emoji text (larger, at bottom)\n      const emojiText = document.createElementNS(svgNS, 'text');\n      emojiText.setAttribute('x', emojiTx.toString());\n      emojiText.setAttribute('y', emojiTy.toString());\n      emojiText.setAttribute('text-anchor', 'middle');\n      emojiText.setAttribute('dominant-baseline', 'middle');\n      emojiText.setAttribute('font-size', '32');\n      emojiText.setAttribute('transform', `rotate(${midAngle}, ${emojiTx}, ${emojiTy})`);\n      emojiText.textContent = emojis[i % emojis.length];\n      svg.appendChild(emojiText);\n    }\n    wheelRef.current.appendChild(svg);\n  };\n  const calculateTargetAngle = segment => {\n    const anglePerSegment = 360 / segmentCount;\n    const index = parseInt(segment) - 1;\n    const centerAngle = index * anglePerSegment + anglePerSegment / 2;\n    return (-centerAngle % 360 + 360) % 360;\n  };\n  const detectSegment = finalRotation => {\n    const normalized = (finalRotation % 360 + 360) % 360;\n    const adjusted = (normalized + 90) % 360;\n    const segment = Math.floor(adjusted / (360 / segmentCount));\n    return segment + 1;\n  };\n  const playSpinSound = () => {\n    if (spinAudioRef.current) {\n      try {\n        spinAudioRef.current.currentTime = 0;\n        spinAudioRef.current.play().catch(error => {\n          console.log('Audio playback failed:', error);\n        });\n      } catch (error) {\n        console.log('Audio error:', error);\n      }\n    }\n  };\n  const spin = () => {\n    if (isSpinning) return;\n    setIsSpinning(true);\n    const selected = winningSegment;\n    const duration = parseFloat(spinDuration.toString());\n    const spins = 5;\n    let targetSegment;\n    let targetAngle;\n    if (selected === 'random') {\n      targetSegment = Math.floor(Math.random() * segmentCount) + 1;\n    } else {\n      targetSegment = parseInt(selected);\n    }\n    targetAngle = calculateTargetAngle(targetSegment.toString());\n\n    // Add random variation between 5-10 degrees for slight variation\n    const randomVariation = 5 + Math.random() * 5; // 5-10 degrees\n    const variationDirection = Math.random() < 0.5 ? -1 : 1; // randomly clockwise or counterclockwise\n    const addedRotation = randomVariation * variationDirection;\n    const finalTargetAngle = targetAngle + addedRotation;\n    console.log(`Added rotation: ${addedRotation.toFixed(2)}°`);\n    const baseRotation = Math.round(currentRotation / 360) * 360;\n    const finalRotation = baseRotation + spins * 360 + finalTargetAngle;\n    setStatus('Spinning...');\n    playSpinSound();\n    gsap.to(wheelRef.current, {\n      rotation: finalRotation,\n      duration: duration,\n      ease: \"power2.out\",\n      onComplete: () => {\n        setIsSpinning(false);\n        setCurrentRotation(finalRotation);\n        setStatus(`🎯 Landed on Segment ${targetSegment}!`);\n      }\n    });\n  };\n  useEffect(() => {\n    drawWheel();\n  }, [segmentCount]);\n  const generateWinningOptions = () => {\n    const options = [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"random\",\n      children: \"Random\"\n    }, \"random\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 44\n    }, this)];\n    for (let i = 1; i <= segmentCount; i++) {\n      options.push(/*#__PURE__*/_jsxDEV(\"option\", {\n        value: i,\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this));\n    }\n    return options;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"spinning-wheel-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: spinAudioRef,\n      preload: \"auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"/spin.mp3\",\n        type: \"audio/mpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), \"Your browser does not support the audio element.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDFAF Guaranteed Spinning Wheel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"segmentCount\",\n            children: \"Segments:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"segmentCount\",\n            min: \"2\",\n            max: \"12\",\n            value: segmentCount,\n            onChange: e => updateSegmentCount(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"winningSegment\",\n            children: \"Winning Segment:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"winningSegment\",\n            value: winningSegment,\n            onChange: e => setWinningSegment(e.target.value),\n            children: generateWinningOptions()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"spinDuration\",\n            children: \"Spin Duration (s):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"spinDuration\",\n            min: \"1\",\n            max: \"10\",\n            value: spinDuration,\n            step: \"0.5\",\n            onChange: e => setSpinDuration(parseFloat(e.target.value))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wheel-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wheel\",\n          ref: wheelRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pointer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center-dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: spin,\n        disabled: isSpinning,\n        children: isSpinning ? '🌟 SPINNING...' : '🎲 SPIN THE WHEEL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(SpinningWheel, \"WT46MH0Ff6/HPPMc0RAgqLI0AFc=\");\n_c = SpinningWheel;\nexport default SpinningWheel;\nvar _c;\n$RefreshReg$(_c, \"SpinningWheel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","gsap","jsxDEV","_jsxDEV","SpinningWheel","_s","segmentCount","setSegmentCount","winningSegment","setWinningSegment","spinDuration","setSpinDuration","isSpinning","setIsSpinning","status","setStatus","currentRotation","setCurrentRotation","wheelRef","spinAudioRef","colors","emojis","updateSegmentCount","newCount","count","parseInt","setTimeout","drawWheel","current","innerHTML","svgNS","svg","document","createElementNS","setAttribute","cx","cy","r","angle","i","startAngle","endAngle","x1","Math","cos","PI","y1","sin","x2","y2","largeArc","pathData","path","length","appendChild","midAngle","numberTx","numberTy","emojiTx","emojiTy","numberText","toString","textContent","emojiText","calculateTargetAngle","segment","anglePerSegment","index","centerAngle","detectSegment","finalRotation","normalized","adjusted","floor","playSpinSound","currentTime","play","catch","error","console","log","spin","selected","duration","parseFloat","spins","targetSegment","targetAngle","random","randomVariation","variationDirection","addedRotation","finalTargetAngle","toFixed","baseRotation","round","to","rotation","ease","onComplete","generateWinningOptions","options","value","children","fileName","_jsxFileName","lineNumber","columnNumber","push","className","ref","preload","src","type","htmlFor","id","min","max","onChange","e","target","step","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/rich/Dropbox/2025/Footballco/01_PIXEL_QUIZ/05_Build/gsap_spin/src/SpinningWheel.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\nimport './SpinningWheel.css';\n\ninterface SpinningWheelProps {}\n\nconst SpinningWheel: React.FC<SpinningWheelProps> = () => {\n  const [segmentCount, setSegmentCount] = useState<number>(6);\n  const [winningSegment, setWinningSegment] = useState<string>('random');\n  const [spinDuration, setSpinDuration] = useState<number>(5.5);\n  const [isSpinning, setIsSpinning] = useState<boolean>(false);\n  const [status, setStatus] = useState<string>('Ready to spin!');\n  const [currentRotation, setCurrentRotation] = useState<number>(0);\n\n  const wheelRef = useRef<HTMLDivElement>(null);\n  const spinAudioRef = useRef<HTMLAudioElement>(null);\n\n  const colors: string[] = [\n    '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4',\n    '#feca57', '#ff9ff3', '#a8e6cf', '#ff8b94',\n    '#ffaaa5', '#ff677d', '#d4a4eb', '#a8dadc'\n  ];\n\n  const emojis: string[] = [\n    '🎯', '🍀', '⭐', '🎉', '🔥', '💎', \n    '🚀', '🎊', '🌟', '🎈', '🎁', '🏆'\n  ];\n\n  const updateSegmentCount = (newCount: string): void => {\n    const count = parseInt(newCount);\n    if (count >= 2 && count <= 12) {\n      setSegmentCount(count);\n      setStatus(`Updated to ${count} segments`);\n      \n      // Reset winning segment if it's higher than new count\n      if (winningSegment !== 'random' && parseInt(winningSegment) > count) {\n        setWinningSegment('random');\n      }\n      \n      setTimeout(() => {\n        if (!isSpinning) setStatus('Ready to spin!');\n      }, 2000);\n    }\n  };\n\n  const drawWheel = (): void => {\n    if (!wheelRef.current) return;\n\n    wheelRef.current.innerHTML = '';\n    const svgNS = \"http://www.w3.org/2000/svg\";\n    const svg = document.createElementNS(svgNS, 'svg');\n    svg.setAttribute('viewBox', '0 0 350 350');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('height', '100%');\n\n    const cx = 175;\n    const cy = 175;\n    const r = 165;\n    const angle = 360 / segmentCount;\n\n    for (let i = 0; i < segmentCount; i++) {\n      const startAngle = i * angle;\n      const endAngle = (i + 1) * angle;\n\n      const x1 = cx + r * Math.cos((startAngle - 90) * Math.PI / 180);\n      const y1 = cy + r * Math.sin((startAngle - 90) * Math.PI / 180);\n      const x2 = cx + r * Math.cos((endAngle - 90) * Math.PI / 180);\n      const y2 = cy + r * Math.sin((endAngle - 90) * Math.PI / 180);\n\n      const largeArc = angle > 180 ? 1 : 0;\n      const pathData = `M ${cx} ${cy} L ${x1} ${y1} A ${r} ${r} 0 ${largeArc} 1 ${x2} ${y2} Z`;\n\n      const path = document.createElementNS(svgNS, 'path');\n      path.setAttribute('d', pathData);\n      path.setAttribute('fill', colors[i % colors.length]);\n      path.setAttribute('stroke', '#fff');\n      svg.appendChild(path);\n\n      const midAngle = (startAngle + endAngle) / 2;\n      \n      // Position for number (top of segment)\n      const numberTx = cx + 80 * Math.cos((midAngle - 90) * Math.PI / 180);\n      const numberTy = cy + 80 * Math.sin((midAngle - 90) * Math.PI / 180);\n      \n      // Position for emoji (bottom of segment)\n      const emojiTx = cx + 130 * Math.cos((midAngle - 90) * Math.PI / 180);\n      const emojiTy = cy + 130 * Math.sin((midAngle - 90) * Math.PI / 180);\n\n      // Add number text (at top)\n      const numberText = document.createElementNS(svgNS, 'text');\n      numberText.setAttribute('x', numberTx.toString());\n      numberText.setAttribute('y', numberTy.toString());\n      numberText.setAttribute('text-anchor', 'middle');\n      numberText.setAttribute('dominant-baseline', 'middle');\n      numberText.setAttribute('fill', 'white');\n      numberText.setAttribute('font-size', '18');\n      numberText.setAttribute('font-weight', 'bold');\n      numberText.setAttribute('transform', `rotate(${midAngle}, ${numberTx}, ${numberTy})`);\n      numberText.textContent = (i + 1).toString();\n      svg.appendChild(numberText);\n\n      // Add emoji text (larger, at bottom)\n      const emojiText = document.createElementNS(svgNS, 'text');\n      emojiText.setAttribute('x', emojiTx.toString());\n      emojiText.setAttribute('y', emojiTy.toString());\n      emojiText.setAttribute('text-anchor', 'middle');\n      emojiText.setAttribute('dominant-baseline', 'middle');\n      emojiText.setAttribute('font-size', '32');\n      emojiText.setAttribute('transform', `rotate(${midAngle}, ${emojiTx}, ${emojiTy})`);\n      emojiText.textContent = emojis[i % emojis.length];\n      svg.appendChild(emojiText);\n    }\n\n    wheelRef.current.appendChild(svg);\n  };\n\n  const calculateTargetAngle = (segment: string): number => {\n    const anglePerSegment = 360 / segmentCount;\n    const index = parseInt(segment) - 1;\n    const centerAngle = index * anglePerSegment + anglePerSegment / 2;\n    return ((-centerAngle % 360) + 360) % 360;\n  };\n\n  const detectSegment = (finalRotation: number): number => {\n    const normalized = ((finalRotation % 360) + 360) % 360;\n    const adjusted = (normalized + 90) % 360;\n    const segment = Math.floor(adjusted / (360 / segmentCount));\n    return segment + 1;\n  };\n\n  const playSpinSound = (): void => {\n    if (spinAudioRef.current) {\n      try {\n        spinAudioRef.current.currentTime = 0;\n        spinAudioRef.current.play().catch(error => {\n          console.log('Audio playback failed:', error);\n        });\n      } catch (error) {\n        console.log('Audio error:', error);\n      }\n    }\n  };\n\n  const spin = (): void => {\n    if (isSpinning) return;\n    setIsSpinning(true);\n\n    const selected = winningSegment;\n    const duration = parseFloat(spinDuration.toString());\n    const spins = 5;\n    let targetSegment: number;\n    let targetAngle: number;\n\n    if (selected === 'random') {\n      targetSegment = Math.floor(Math.random() * segmentCount) + 1;\n    } else {\n      targetSegment = parseInt(selected);\n    }\n\n    targetAngle = calculateTargetAngle(targetSegment.toString());\n    \n    // Add random variation between 5-10 degrees for slight variation\n    const randomVariation = 5 + Math.random() * 5; // 5-10 degrees\n    const variationDirection = Math.random() < 0.5 ? -1 : 1; // randomly clockwise or counterclockwise\n    const addedRotation = randomVariation * variationDirection;\n    const finalTargetAngle = targetAngle + addedRotation;\n    \n    console.log(`Added rotation: ${addedRotation.toFixed(2)}°`);\n    \n    const baseRotation = Math.round(currentRotation / 360) * 360;\n    const finalRotation = baseRotation + spins * 360 + finalTargetAngle;\n\n    setStatus('Spinning...');\n    playSpinSound();\n\n    gsap.to(wheelRef.current, {\n      rotation: finalRotation,\n      duration: duration,\n      ease: \"power2.out\",\n      onComplete: () => {\n        setIsSpinning(false);\n        setCurrentRotation(finalRotation);\n        setStatus(`🎯 Landed on Segment ${targetSegment}!`);\n      }\n    });\n  };\n\n  useEffect(() => {\n    drawWheel();\n  }, [segmentCount]);\n\n  const generateWinningOptions = (): React.ReactElement[] => {\n    const options: React.ReactElement[] = [<option key=\"random\" value=\"random\">Random</option>];\n    for (let i = 1; i <= segmentCount; i++) {\n      options.push(\n        <option key={i} value={i}>{i}</option>\n      );\n    }\n    return options;\n  };\n\n  return (\n    <div className=\"spinning-wheel-container\">\n      <audio ref={spinAudioRef} preload=\"auto\">\n        <source src=\"/spin.mp3\" type=\"audio/mpeg\" />\n        Your browser does not support the audio element.\n      </audio>\n\n      <div className=\"container\">\n        <h1>🎯 Guaranteed Spinning Wheel</h1>\n        \n        <div className=\"controls\">\n          <div className=\"control-group\">\n            <label htmlFor=\"segmentCount\">Segments:</label>\n            <input \n              type=\"number\" \n              id=\"segmentCount\" \n              min=\"2\" \n              max=\"12\" \n              value={segmentCount}\n              onChange={(e) => updateSegmentCount(e.target.value)}\n            />\n          </div>\n          \n          <div className=\"control-group\">\n            <label htmlFor=\"winningSegment\">Winning Segment:</label>\n            <select \n              id=\"winningSegment\"\n              value={winningSegment}\n              onChange={(e) => setWinningSegment(e.target.value)}\n            >\n              {generateWinningOptions()}\n            </select>\n          </div>\n          \n          <div className=\"control-group\">\n            <label htmlFor=\"spinDuration\">Spin Duration (s):</label>\n            <input \n              type=\"number\" \n              id=\"spinDuration\" \n              min=\"1\" \n              max=\"10\" \n              value={spinDuration}\n              step=\"0.5\"\n              onChange={(e) => setSpinDuration(parseFloat(e.target.value))}\n            />\n          </div>\n        </div>\n\n        <div className=\"wheel-container\">\n          <div className=\"wheel\" ref={wheelRef}></div>\n          <div className=\"pointer\"></div>\n          <div className=\"center-dot\"></div>\n        </div>\n\n        <button \n          onClick={spin}\n          disabled={isSpinning}\n        >\n          {isSpinning ? '🌟 SPINNING...' : '🎲 SPIN THE WHEEL'}\n        </button>\n        \n        <div className=\"status\">{status}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default SpinningWheel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}